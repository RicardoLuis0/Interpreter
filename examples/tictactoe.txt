void pause(){
    getch();
}

void game_main_print(int choice){
    cls();
    print("TicTacToe by Ricardo\n\n");
    if(choice==0){
        print("> vs Computer\n- vs Player\n- Exit\n");
    }else if(choice==1){
        print("- vs Computer\n> vs Player\n- Exit\n");
    }else if(choice==2){
        print("- vs Computer\n- vs Player\n> Exit\n");
    }
}

void wrap(int &val,int min,int max){
    if(val<min)val=max;
    if(val>max)val=min;
}

int main(){
    int choice=0;
    while(true){
        game_main_print(choice);
        int c=getch();
        if(c=='W'||c=='w'){
			if(choice==0){
				choice=2;
			}else{
				choice--;
			}
		}else if(c=='S'||c=='s'){
			if(choice==2){
				choice=0;
			}else{
				choice++;
			}
        }else if(c=='\r'||c=='\n'||c=='e'||c=='E'){
            if(choice==0){
                game(true);
            }else if(choice==1){
                game(false);
            }else if(choice==2){
                return 0;
            }
        }
    }
}

void print_board(int[3][3] board,int x,int y,string pre,string post){
    cls();
    print(pre);
    print("+-+-+-+\n");
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(x<0||y<0){
                print("|");
            }else if(j==x&&i==y){
                print("(");
            }else if(j==x+1&&i==y){
                print(")");
            }else{
                print("|");
            }
            if(board[j][i]==1){
                print("X");
            }else if(board[j][i]==2){
                print("O");
            }else{
                print(" ");
            }
        }
        if(x<0||y<0){
            print("|\n");
        }else if(i==y&&x==2){
            print(")\n");
        }else{
            print("|\n");
        }
        print("+-+-+-+\n");
    }
    print(post);
}


int checkwin(int[3][3] &board){
    for(int i=0;i<3;i++){
        if(board[i][0]!=0&&board[i][0]==board[i][1]&&board[i][1]==board[i][2]){
            return board[i][0];
        }
        if(board[0][i]!=0&&board[0][i]==board[1][i]&&board[1][i]==board[2][i]){
            return board[0][i];
        }
    }
    if(board[0][0]!=0&&board[0][0]==board[1][1]&&board[1][1]==board[2][2]){
        return board[0][0];
    }else if(board[0][2]!=0&&board[0][2]==board[1][1]&&board[1][1]==board[2][0]){
        return board[0][2];
    }else{
        int is_tie=1;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board[i][j]==0)is_tie=0;
            }
        }
        if(is_tie)return 3;
    }
    return 0;
}


void game(int computer){
    int[3][3] board;
    int turn;
    int difficulty;
    string player1;
    string player2;
    string winmsg(int num){
        if(num==1){
            return player1+" Wins!\n";
        }else if(num==2){
            return player2+" Wins!\n";
        }else{
            return "It's a Tie!\n";
        }
    }
    int p1x,p1y,p2x,p2y;
    if(computer){
        print("Player's Name: ");
        player1=getline();
        player2="Computer";
        print("Difficulty (1.Easy,2.Medium,3.Hard): ");
        while(true){
            char c=getch();
			if(c=='1'){
                difficulty=1;
                break;
            }else if(c=='2'){
                difficulty=2;
                break;
            }else if(c=='3'){
                difficulty=3;
                break;
            }
        }
    }else{
        print("Player 1's Name: ");
        player1=getline();
        print("Player 2's Name: ");
        player2=getline();
    }
    int tick=1;
    while(true){
        string name;
        if(tick==1){
            name=player1;
            player_turn(board,p1x,p1y,1,player1);
            tick=2;
        }else if(tick==2){
            name=player2;
            if(computer){
                if(difficulty==1){
                    computer_turn_easy(board);
                }else if(difficulty==2){
                    computer_turn_medium(board);
                }else{
                    computer_turn_hard(board);
                }
            }else{
                player_turn(board,p2x,p2y,2,player2);
            }
            tick=1;
        }
        int cw=checkwin(board);
        if(cw!=0){
            print_board(board,-1,-1,winmsg(cw),"\nPress any Key...");
            pause();
            return;
        }
        if(!computer){
            print_board(board,-1,-1,name+"'s Turn Is Over\n","\nPress any Key...");
            pause();
        }
    }
}

void player_turn(int[3][3] &board,int &x,int &y,int num,string name){
    while(true){
        print_board(board,x,y,name+"'s Turn\n","\nMake your move...");
        int c=getch();
		if(c=='W'||c=='w'){
			y--;
			wrap(y,0,2);
		}else if(c=='A'||c=='a'){
			x--;
            wrap(x,0,2);
		}else if(c=='D'||c=='d'){
			x++;
            wrap(x,0,2);
		}else if(c=='S'||c=='s'){
			y++;
            wrap(y,0,2);
        }else if(c=='\r'||c=='\n'||c=='e'||c=='E'){
            if(board[x][y]==0){
                board[x][y]=num;
                return;
            }
        }
    }
}

void computer_turn_easy(int[3][3] &board){//random
    while(true){
        int x=rand()%3;
        int y=rand()%3;
        if(board[x][y]==0){
            board[x][y]=2;
            return;
        }
    }
}

int computer_turn_medium_part(int[3][3] &board){
    int lose_x=-1;
    int lose_y=-1;
    for(int y=0;y<3;y++){//find winning/losing moves
        for(int x=0;x<3;x++){
            if(board[x][y]==0){
                board[x][y]=2;//check for wins
                int res=checkwin(board);
                if(res==2)return 1;//win
                if(lose_x==-1){
                    board[x][y]=1;//check for losses
                    res=checkwin(board);
                    if(res==1){
                        lose_x=x;
                        lose_y=y;
                    }
                }
                board[x][y]=0;
            }
        }
    }
    if(lose_x!=-1){//if would lose, try to prevent it
        board[lose_x][lose_y]=2;
        return 1;
    }
	return 0;
}

void computer_turn_medium(int[3][3] &board){
	if(!computer_turn_medium_part(board))computer_turn_easy(board);//if no immediate wins or losses, play randomly
}

void computer_turn_hard(int[3][3] &board){//minimax
	if(computer_turn_medium_part(board))return;
    print_board(board,-1,-1,"Computer's Turn\n","\nThe Computer Is Thinking...");
    int best=-9999;
    int best_x;
    int best_y;
    for(int y=0;y<3;y++){//find best move
        for(int x=0;x<3;x++){
            if(board[x][y]==0){
                board[x][y]=2;
                int new_val=minimax(board,0,true);
                board[x][y]=0;
                if(new_val>best){
                    best=new_val;
                    best_x=x;
                    best_y=y;
                }
            }
        }
    }
    if(best!=-9999){//execute best move
        board[best_x][best_y]=2;
    }
}

int max(int a,int b){
    if(a>=b){
        return a;
    }
    return b;
}

int min(int a,int b){
    if(a<=b){
        return a;
    }
    return b;
}

int minimax(int[3][3] &board,int depth,int player){
    int cw=checkwin(board);
    if(cw==1){//if endpoint return
        return depth-10;//player wins
    }else if(cw==2){
        return 10-depth;//computer wins
    }else if(cw==3){
        return 0;//tie
    }else{
        int val;
        int move;
        if(player){
            val=-999;
            move=1;
        }else{
            val=999;
            move=2;
        }
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board[j][i]==0){//if is a valid move
                    board[j][i]=move;
                    int next_val=minimax(board,depth+1,!player);
                    board[j][i]=0;
                    if(player){
                        val=max(val,next_val);
                    }else{
                        val=min(val,next_val);
                    }
                }
            }
        }
        return val;//return value for best move
    }
}
